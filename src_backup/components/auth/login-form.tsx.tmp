'use client';

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Eye, EyeOff, Mail, Lock, ExternalLink } from "lucide-react";
import { auth } from "@/lib/firebase";
import { signInWithEmailAndPassword } from "firebase/auth";
import { useRouter } from "next/navigation";

export default function LoginForm() {
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      await signInWithEmailAndPassword(auth, email, password);
      router.push("/"); // Redireciona para a página principal após o login
    } catch (error: any) {
      console.error("Erro no login:", error);
      setError(
        error.code === "auth/invalid-credential"
          ? "Email ou senha incorretos"
          : "Ocorreu um erro ao fazer login"
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-background flex items-center justify-center p-4 relative overflow-hidden">
      {/* Animated background effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-primary/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-accent/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-primary/5 rounded-full blur-3xl animate-pulse delay-500"></div>
      </div>
      
      {/* Flowing lines effect */}
      <div className="absolute inset-0 opacity-20">
        <svg className="w-full h-full" viewBox="0 0 1200 800" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="hsl(45, 100%, 70%)" stopOpacity="0.3" />
              <stop offset="100%" stopColor="hsl(35, 90%, 60%)" stopOpacity="0.1" />
            </linearGradient>
          </defs>
          <path d="M0,300 Q300,100 600,250 T1200,200" stroke="url(#grad1)" strokeWidth="2" fill="none" className="animate-pulse">
            <animate attributeName="d" dur="8s" repeatCount="indefinite" 
              values="M0,300 Q300,100 600,250 T1200,200;M0,250 Q300,150 600,200 T1200,250;M0,300 Q300,100 600,250 T1200,200" />
          </path>
          <path d="M0,500 Q400,300 800,450 T1200,400" stroke="url(#grad1)" strokeWidth="1.5" fill="none" className="animate-pulse delay-1000">
            <animate attributeName="d" dur="10s" repeatCount="indefinite" 
              values="M0,500 Q400,300 800,450 T1200,400;M0,450 Q400,350 800,400 T1200,450;M0,500 Q400,300 800,450 T1200,400" />
          </path>
          <path d="M0,150 Q200,50 400,100 T800,80" stroke="url(#grad1)" strokeWidth="1" fill="none" className="animate-pulse delay-2000">
            <animate attributeName="d" dur="12s" repeatCount="indefinite" 
              values="M0,150 Q200,50 400,100 T800,80;M0,100 Q200,0 400,50 T800,30;M0,150 Q200,50 400,100 T800,80" />
          </path>
        </svg>
      </div>

      <Card className="w-full max-w-md bg-gradient-card border-border/50 shadow-elegant backdrop-blur-sm relative z-10">
        <CardHeader className="text-center space-y-6 pb-8">
          <div className="space-y-2">
            <h1 className="text-4xl font-bold text-primary tracking-wider">
              IACAM
            </h1>
            <div className="flex items-center justify-center space-x-2">
              <div className="w-8 h-px bg-gradient-primary"></div>
              <span className="text-sm font-medium text-accent px-2 py-1 rounded-full border border-primary/20 bg-primary/5">
                2.0
              </span>
              <div className="w-8 h-px bg-gradient-primary"></div>
            </div>
          </div>
          <p className="text-muted-foreground text-sm">
            Acesso Exclusivo
          </p>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <form onSubmit={handleSubmit} className="space-y-5">
            {error && (
              <div className="p-3 text-sm text-red-500 bg-red-500/10 border border-red-500/20 rounded-md">
                {error}
              </div>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="email" className="text-sm font-medium text-foreground">
                Email
              </Label>
              <div className="relative">
                <Input
                  id="email"
                  type="email"
                  placeholder="seu@email.com"
                  value={email}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}
                  className="pl-10 bg-input/50 border-border/50 focus:border-primary/50 focus:ring-2 focus:ring-primary/20 placeholder:text-muted-foreground/50"
                  required
                  disabled={loading}
                />
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password" className="text-sm font-medium text-foreground">
                Senha
              </Label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="••••••••"
                  value={password}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}
                  className="pl-10 pr-10 bg-input/50 border-border/50 focus:border-primary/50 focus:ring-2 focus:ring-primary/20 placeholder:text-muted-foreground/50"
                  required
                  disabled={loading}
                />
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors"
                  disabled={loading}
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
            </div>
            
            <Button 
              type="submit" 
              className="w-full bg-gradient-primary hover:shadow-glow transition-all duration-300 font-medium"
              disabled={loading}
            >
              {loading ? "Entrando..." : "Acessar Plataforma"}
              {!loading && <ExternalLink className="ml-2 h-4 w-4" />}
            </Button>
          </form>
          
          <div className="text-center pt-4 space-y-3">
            <p className="text-xs text-muted-foreground/70">
              © 2025 IACAM I.A. - Tecnologia Avançada
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
