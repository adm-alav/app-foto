'use client';

import { useState } from "react";
import { Upload } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";

interface ChartAnalysis {
  action: 'COMPRE' | 'VENDA';
  asset: string;
  timeframe: string;
  entryTime: string;
  confidence: number;
  protection1: number;
  protection2: number;
  entryPrice: number;
}

const IACamUpload = () => {
  // Estados básicos
  const [dragActive, setDragActive] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [selectedAsset, setSelectedAsset] = useState<string>('BTC/USD');
  const [selectedTimeframe, setSelectedTimeframe] = useState<string>('M1');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<ChartAnalysis | null>(null);

interface ChartAnalysis {
  action: 'COMPRE' | 'VENDA';
  asset: string;
  timeframe: string;
  entryTime: string;
  confidence: number;
  protection1: number;
  protection2: number;
  entryPrice: number;
}

export default function IACamUpload() {
  // Estados básicos
  const [dragActive, setDragActive] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [selectedAsset, setSelectedAsset] = useState<string>('BTC/USD');
  const [selectedTimeframe, setSelectedTimeframe] = useState<string>('M1');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<ChartAnalysis | null>(null);

  // Funções de manipulação de arquivos
  const handleFileUpload = async (file: File) => {
    if (file) {
      const reader = new FileReader();
      
      reader.onloadend = () => {
        const imageUrl = reader.result as string;
        setSelectedImage(imageUrl);
      };
      
      reader.onerror = () => {
        console.error("Erro ao ler o arquivo.");
        setSelectedImage(null);
      };
      
      reader.readAsDataURL(file);
    }
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      await handleFileUpload(file);
    }
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    const file = e.dataTransfer.files?.[0];
    if (file) {
      await handleFileUpload(file);
    }
  };

  const analyzeImage = () => {
    if (!selectedImage || isAnalyzing) return;
    
    setIsAnalyzing(true);
    
    // Função auxiliar para criar o resultado da análise
    const generateResult = () => {
      const currentPrice = Number((Math.random() * 90 + 10).toFixed(2));
      const action: 'COMPRE' | 'VENDA' = Math.random() > 0.5 ? 'COMPRE' : 'VENDA';
      
      // Calcular proteções
      const protection1 = action === 'COMPRE' 
        ? Number((currentPrice * 0.99).toFixed(2))
        : Number((currentPrice * 1.01).toFixed(2));
        
      const protection2 = action === 'COMPRE'
        ? Number((currentPrice * 0.985).toFixed(2))
        : Number((currentPrice * 1.015).toFixed(2));

      // Definir horário de entrada (1 minuto à frente)
      const entryTime = new Date();
      entryTime.setMinutes(entryTime.getMinutes() + 1);

      return {
        action,
        asset: selectedAsset,
        timeframe: selectedTimeframe,
        entryTime: entryTime.toISOString(),
        confidence: Math.floor(Math.random() * 20) + 80, // 80-99%
        entryPrice: currentPrice,
        protection1,
        protection2
      };
    };

    // Simular processo de análise com um único setTimeout
    setTimeout(() => {
      setAnalysisResult(generateResult());
      setIsAnalyzing(false);
    }, 3000);
  };

  return (
    <Card className="p-8 max-w-4xl mx-auto" style={{
      background: 'linear-gradient(145deg, #1a1505, #1f1a08)',
      boxShadow: '0 4px 60px rgba(255, 184, 0, 0.15)',
    }}>
      {!selectedImage && (
        <div 
          className={`
            border-2 border-dashed rounded-lg p-8 text-center space-y-4 cursor-pointer
            transition-all duration-300 group
            ${dragActive 
              ? 'border-[#FFB800] bg-[#FFB800]/10' 
              : 'border-[#FFB800]/20 hover:border-[#FFB800]/40 hover:bg-[#FFB800]/5'
            }
          `}
          onDragOver={handleDrag}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDrop={handleDrop}
          onClick={() => document.querySelector('input[type="file"]')?.click()}
        >
          <div className="w-16 h-16 rounded-full bg-[#FFB800]/10 flex items-center justify-center mx-auto group-hover:scale-110 transition-transform duration-300">
            <Upload className="w-8 h-8 text-[#FFB800]/60" />
          </div>
          <div>
            <h3 className="text-[#FFB800] text-xl mb-2">
              {dragActive ? 'Solte o arquivo aqui' : 'Carregar Gráfico'}
            </h3>
            <p className="text-[#FFB800]/60">
              Arraste e solte ou clique para selecionar
            </p>
          </div>
          <input
            type="file"
            className="hidden"
            accept="image/*"
            onChange={handleFileSelect}
          />
        </div>

const IACamUpload = () => {
  // Estados básicos
  const [dragActive, setDragActive] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [selectedAsset, setSelectedAsset] = useState<string>('BTC/USD');
  const [selectedTimeframe, setSelectedTimeframe] = useState<string>('M1');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<ChartAnalysis | null>(null);
  
  // Função para calcular o horário de entrada (1 minuto à frente)
  const calculateEntryTime = () => {
    const now = new Date();
    now.setMinutes(now.getMinutes() + 1);
    return now.toISOString();
  };
  
  // Função para calcular proteções baseadas no preço de entrada
  const calculateProtections = (entryPrice: number, action: 'COMPRE' | 'VENDA') => {
    if (action === 'COMPRE') {
      const protection1 = entryPrice * 0.99; // -1%
      const protection2 = entryPrice * 0.985; // -1.5%
      return { protection1, protection2 };
    } else {
      const protection1 = entryPrice * 1.01; // +1%
      const protection2 = entryPrice * 1.015; // +1.5%
      return { protection1, protection2 };
    }
  };

  // Funções de Upload
  const analyzeImage = () => {
    if (!selectedImage || isAnalyzing) return;
    
    setIsAnalyzing(true);
    
    // Função auxiliar para criar o resultado da análise
    const generateResult = () => {
      const currentPrice = Number((Math.random() * 90 + 10).toFixed(2));
      const action: 'COMPRE' | 'VENDA' = Math.random() > 0.5 ? 'COMPRE' : 'VENDA';
      
      // Calcular proteções
      const protection1 = action === 'COMPRE' 
        ? Number((currentPrice * 0.99).toFixed(2))
        : Number((currentPrice * 1.01).toFixed(2));
        
      const protection2 = action === 'COMPRE'
        ? Number((currentPrice * 0.985).toFixed(2))
        : Number((currentPrice * 1.015).toFixed(2));

      // Definir horário de entrada (1 minuto à frente)
      const entryTime = new Date();
      entryTime.setMinutes(entryTime.getMinutes() + 1);

      return {
        action,
        asset: selectedAsset,
        timeframe: selectedTimeframe,
        entryTime: entryTime.toISOString(),
        confidence: Math.floor(Math.random() * 20) + 80, // 80-99%
        entryPrice: currentPrice,
        protection1,
        protection2
      };
    };

    // Simular processo de análise com um único setTimeout
    setTimeout(() => {
      setAnalysisResult(generateResult());
      setIsAnalyzing(false);
    }, 3000);
  };

  const handleFileUpload = async (file: File) => {
    if (file) {
      setIsLoading(true);
      const reader = new FileReader();
      
      reader.onloadend = () => {
        const imageUrl = reader.result as string;
        setSelectedImage(imageUrl);
      };
      
      reader.onerror = () => {
        console.error("Erro ao ler o arquivo.");
        setSelectedImage(null);
        setIsLoading(false);
      };
      
      reader.readAsDataURL(file);
    }
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      await handleFileUpload(file);
    }
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    const file = e.dataTransfer.files?.[0];
    if (file) {
      await handleFileUpload(file);
    }
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  // Limpar timeouts quando o componente for desmontado
  useEffect(() => {
    return () => {
      if (analysisTimeout.current) {
        clearTimeout(analysisTimeout.current);
      }
      setIsAnalyzing(false);
    };
  }, []);

  return (
    <Card className="p-8 max-w-4xl mx-auto" style={{
        background: 'linear-gradient(145deg, #1a1505, #1f1a08)',
        boxShadow: '0 4px 60px rgba(255, 184, 0, 0.15)',
      }}>
      <div className="fixed top-0 left-0 right-0 bg-gradient-golden z-10 px-6 py-4">
        <div className="flex items-center justify-between max-w-4xl mx-auto">
          <div className="flex items-center gap-2">
            <span className="logo-gradient text-2xl">IACAM</span>
            <span className="bg-[#FFB800] text-black text-xs px-2 py-1 rounded-full">2.0</span>
          </div>
          <a 
            href="https://stakbroker.com/traderoom"
            target="_blank"
            className="text-sm text-[#FFB800]/80 hover:text-[#FFB800] transition-colors"
          >
            stakbroker.com
          </a>
        </div>
      </div>

      <div className="text-center mb-12 space-y-4 mt-20">
        <div className="flex items-center justify-center gap-2 mb-4">
          <span className="animate-pulse text-[#FFB800] text-3xl">✨</span>
          <h2 className="logo-gradient text-4xl tracking-tight">
            IA CAM 2.0
          </h2>
          <span className="animate-pulse text-[#FFB800] text-3xl">✨</span>
        </div>
        <p className="text-[#FFB800]/80 text-lg font-medium">
          Análise Automática de Sinais
        </p>
        <div className="w-24 h-1 bg-gradient-to-r from-transparent via-[#FFB800]/20 to-transparent mx-auto"></div>
      </div>

      {selectedImage && (
        <div className="mb-6 rounded-lg overflow-hidden bg-[#0a0a0a]">
          <h3 className="text-[#FFB800] text-lg p-4 border-b border-[#FFB800]/20">
            Gráfico Carregado
          </h3>
          <div className="p-4">
            <img src={selectedImage} alt="Gráfico carregado" className="w-full rounded" />
          </div>
        </div>
      )}

      {selectedImage && !isLoading && !analysisResult && (
        <div className="mb-6 rounded-lg overflow-hidden bg-[#0a0a0a]">
          <h3 className="text-[#FFB800] text-lg p-4 border-b border-[#FFB800]/20">
            Configurar Análise
          </h3>
          <div className="p-4 space-y-4">
            <div>
              <p className="text-[#FFB800]/80 mb-3">Selecione o Ativo</p>
              <div className="grid grid-cols-2 gap-3">
                <Button 
                  variant="outline"
                  onClick={() => setSelectedAsset('BTC/USD')}
                  className={`${
                    selectedAsset === 'BTC/USD' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  BTC/USD
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => setSelectedAsset('XRP/USD')}
                  className={`${
                    selectedAsset === 'XRP/USD' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  XRP/USD
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => setSelectedAsset('BCH/USD')}
                  className={`${
                    selectedAsset === 'BCH/USD' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  BCH/USD
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => setSelectedAsset('ETH/USD')}
                  className={`${
                    selectedAsset === 'ETH/USD' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  ETH/USD
                </Button>
              </div>
            </div>

            <div>
              <p className="text-[#FFB800]/80 mb-3">Selecione o Timeframe</p>
              <div className="grid grid-cols-3 gap-3">
                <Button 
                  variant="outline"
                  onClick={() => setSelectedTimeframe('M1')}
                  className={`${
                    selectedTimeframe === 'M1' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  M1
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => setSelectedTimeframe('M2')}
                  className={`${
                    selectedTimeframe === 'M2' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  M2
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => setSelectedTimeframe('M5')}
                  className={`${
                    selectedTimeframe === 'M5' 
                      ? 'bg-[#FFB800]/20 text-[#FFB800] border-[#FFB800]' 
                      : 'text-[#FFB800]/60 border-[#FFB800]/20 hover:border-[#FFB800]/40'
                  }`}
                >
                  M5
                </Button>
              </div>
            </div>

            <Button
              onClick={() => {
                if (!selectedImage || isAnalyzing) return;
                setAnalysisResult(null);
                analyzeImage(selectedImage);
              }}
              disabled={isAnalyzing}
              className={`w-full h-14 bg-[#FFB800] text-black ${
                isAnalyzing ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#FFB800]/90 hover:scale-[1.02]'
              } text-lg font-medium tracking-wider shadow-lg shadow-[#FFB800]/10 transition-all duration-300`}
            >
              {isAnalyzing ? 'ANALISANDO...' : 'INICIAR ANÁLISE'}
            </Button>

            <p className="text-[#FFB800]/60 text-sm text-center">
              {isAnalyzing ? 'Aguarde enquanto analisamos seu gráfico' : 'Clique para analisar o gráfico'}
            </p>
          </div>
        </div>
      )}

      {isAnalyzing ? (
        <div className="space-y-8 text-center py-12">
          <div className="relative">
            <div className="w-16 h-16 border-4 border-[#FFB800]/20 border-t-[#FFB800] rounded-full animate-spin mx-auto"></div>
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="w-8 h-8 bg-[#FFB800]/10 rounded-full animate-pulse"></div>
            </div>
          </div>
          <div>
            <div className="text-xl font-medium text-[#FFB800] mb-3">Analisando...</div>
            <div className="text-[#FFB800]/60 transition-all duration-300">
              Processando sua análise...
            </div>
          </div>
        </div>
      ) : selectedImage ? (
        <div className="text-center">
          {analysisResult ? (
            <div className="space-y-8">
              <div className="bg-gradient-to-b from-[#FFB800]/10 to-transparent p-8 rounded-2xl">
                <div className="inline-flex items-center justify-center p-4 rounded-full bg-[#FFB800]/20 mb-4">
                  <div className={`text-4xl font-bold ${
                    analysisResult.action === 'COMPRE' ? 'text-green-400' : 'text-red-400'
                  }`}>
                    {analysisResult.action}
                  </div>
                </div>
                
                <div className="space-y-6 mt-6">
                  <div className="grid grid-cols-3 gap-4">
                    <div className="p-4 rounded-xl bg-[#FFB800]/5 border border-[#FFB800]/10">
                      <p className="text-[#FFB800]/60 text-sm mb-1">Ativo</p>
                      <p className="text-[#FFB800] font-semibold">{analysisResult.asset}</p>
                    </div>
                    <div className="p-4 rounded-xl bg-[#FFB800]/5 border border-[#FFB800]/10">
                      <p className="text-[#FFB800]/60 text-sm mb-1">Timeframe</p>
                      <p className="text-[#FFB800] font-semibold">{analysisResult.timeframe}</p>
                    </div>
                    <div className="p-4 rounded-xl bg-[#FFB800]/5 border border-[#FFB800]/10">
                      <p className="text-[#FFB800]/60 text-sm mb-1">Confiança</p>
                      <p className="text-[#FFB800] font-semibold">{analysisResult.confidence}%</p>
                    </div>
                  </div>

                  <div className="bg-[#FFB800]/5 rounded-xl p-4 border border-[#FFB800]/10">
                    <div className="grid grid-cols-4 gap-4">
                      <div>
                        <p className="text-[#FFB800]/60 text-sm mb-1">Entrada em</p>
                        <p className="text-[#FFB800] font-semibold">
                          {new Date(analysisResult.entryTime).toLocaleTimeString('pt-BR', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </p>
                      </div>
                      <div>
                        <p className="text-[#FFB800]/60 text-sm mb-1">Preço</p>
                        <p className="text-[#FFB800] font-semibold">{analysisResult.entryPrice}</p>
                      </div>
                      <div>
                        <p className="text-[#FFB800]/60 text-sm mb-1">Proteção 1</p>
                        <p className="text-red-400 font-semibold">{analysisResult.protection1}</p>
                      </div>
                      <div>
                        <p className="text-[#FFB800]/60 text-sm mb-1">Proteção 2</p>
                        <p className="text-red-400 font-semibold">{analysisResult.protection2}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <Button
                  onClick={() => window.open('https://stakbroker.com/traderoom', '_blank')}
                  className="w-full bg-[#FFB800] text-black hover:bg-[#FFB800]/90 h-12 text-lg font-semibold transition-all duration-300 hover:scale-[1.02]"
                >
                  ABRIR TRADE ROOM
                </Button>
                <Button
                  onClick={() => {
                    setSelectedImage(null);
                    setAnalysisResult(null);
                    setSelectedAsset('');
                    setSelectedTimeframe('');
                  }}
                  className="w-full bg-[#FFB800]/10 hover:bg-[#FFB800]/20 text-[#FFB800] border border-[#FFB800]/20 hover:border-[#FFB800]/40 transition-all duration-300"
                >
                  Analisar Novo Gráfico
                </Button>
              </div>
            </div>
          ) : (
            <div className="animate-pulse">
              <div className="h-8 w-32 bg-[#FFB800]/10 rounded-full mx-auto mb-4"></div>
              <div className="h-4 w-48 bg-[#FFB800]/5 rounded-full mx-auto"></div>
            </div>
          )}
        </div>
      ) : (
        <>
          <div 
            className={`mt-4 p-12 border-2 border-dashed ${
              dragActive ? 'border-[#FFB800] scale-[1.02]' : 'border-[#FFB800]/20'
            } rounded-2xl text-center cursor-pointer hover:border-[#FFB800]/40 hover:scale-[1.01] transition-all duration-300 ease-out`}
            onClick={() => document.getElementById('fileInput')?.click()}
            onDragEnter={handleDrag}
            onDragLeave={handleDrag}
            onDragOver={handleDrag}
            onDrop={handleDrop}
            style={{
              background: 'radial-gradient(circle at center, rgba(255,184,0,0.03) 0%, rgba(26,21,5,0.5) 100%)',
              boxShadow: 'inset 0 2px 4px rgba(255, 184, 0, 0.05)'
            }}
          >
            <input
              type="file"
              id="fileInput"
              className="hidden"
              accept="image/*"
              onChange={handleFileSelect}
            />
            <div className="relative">
              <div className="absolute -top-6 left-1/2 transform -translate-x-1/2">
                <div className="w-12 h-12 rounded-full bg-[#FFB800]/10 flex items-center justify-center animate-pulse">
                  <Upload className="w-6 h-6 text-[#FFB800]" />
                </div>
              </div>
            </div>
            <div className="mt-8 space-y-3">
              <p className="font-semibold text-xl mb-2 text-[#FFB800]">
                Upload do Gráfico
              </p>
              <p className="text-[#FFB800]/80">
                Envie um screenshot de gráfico de candlestick
              </p>
              <div className="flex items-center justify-center gap-2 text-sm text-[#FFB800]/60">
                <span className="px-2 py-1 rounded-full bg-[#FFB800]/10">PNG</span>
                <span className="px-2 py-1 rounded-full bg-[#FFB800]/10">JPG</span>
                <span className="px-2 py-1 rounded-full bg-[#FFB800]/10">JPEG</span>
              </div>
            </div>
            <div className="mt-8 pt-8 border-t border-[#FFB800]/10">
              <p className="text-sm text-[#FFB800]/60">
                Screenshots de gráficos com velas vermelhas e verdes
              </p>
            </div>
          </div>
          
          {/* Instruções */}
          <div className="mt-12 text-left">
            <div className="bg-gradient-to-br from-[#FFB800]/5 to-transparent p-6 rounded-2xl border border-[#FFB800]/10">
              <h4 className="text-[#FFB800] font-semibold text-lg mb-4 flex items-center gap-2">
                <div className="w-1 h-6 bg-gradient-to-b from-[#FFB800] to-[#FFB800]/30 rounded-full"></div>
                Como utilizar
              </h4>
              <ul className="text-[#FFB800]/70 space-y-4">
                <li className="flex items-start group">
                  <span className="mr-3 flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full bg-[#FFB800]/10 text-[#FFB800] group-hover:bg-[#FFB800]/20 transition-colors">1</span>
                  <span>Faça um screenshot do gráfico de candlestick que deseja analisar</span>
                </li>
                <li className="flex items-start group">
                  <span className="mr-3 flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full bg-[#FFB800]/10 text-[#FFB800] group-hover:bg-[#FFB800]/20 transition-colors">2</span>
                  <span>Certifique-se que as velas vermelhas e verdes estejam visíveis</span>
                </li>
                <li className="flex items-start group">
                  <span className="mr-3 flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full bg-[#FFB800]/10 text-[#FFB800] group-hover:bg-[#FFB800]/20 transition-colors">3</span>
                  <span>Arraste e solte a imagem aqui ou clique para selecionar</span>
                </li>
                <li className="flex items-start group">
                  <span className="mr-3 flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full bg-[#FFB800]/10 text-[#FFB800] group-hover:bg-[#FFB800]/20 transition-colors">4</span>
                  <span>Aguarde a análise inteligente do seu gráfico</span>
                </li>
              </ul>
            </div>
          </div>

          <div className="mt-8 pt-8 border-t border-[#FFB800]/10 text-center">
            <p className="text-[#FFB800]/60 text-sm flex items-center justify-center gap-2">
              <span className="w-2 h-2 rounded-full bg-[#FFB800]/40 animate-pulse"></span>
              IA CAM 2.0 funciona exclusivamente na 
              <a 
                href="https://stakbroker.com/traderoom" 
                target="_blank"
                className="text-[#FFB800] hover:text-[#FFB800]/80 transition-colors"
              >
                STAK BROKER
              </a>
            </p>
            <p className="text-[#FFB800]/40 text-xs mt-4">
              © 2025 IA CAM 2.0 - Todos os direitos reservados
            </p>
          </div>
        </>
      )}
    </Card>
  );
};

export default IACamUpload;
